<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.kevin.mybatis.mapping.tumblrTagMapper">
    <resultMap id="TumblrTagBaseMap" type="com.kevin.mybatis.model.TumblrTag">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="NAME" property="name" jdbcType="VARCHAR"/>
        <result column="times" property="times" jdbcType="BIGINT"/>
        <result column="recent_time" property="recentTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
     -->
    <select id="getTumblrTag" parameterType="int"
            resultType="com.kevin.mybatis.model.TumblrTag">
        select * from t_tag where id=#{id}
    </select>
    <select id="getAllTumblrTag" resultMap="TumblrTagBaseMap">
        select * from t_tag
    </select>
    <insert id="insertTumblrTag" parameterType="com.kevin.mybatis.model.TumblrTag" useGeneratedKeys="true" keyProperty="id">
        INSERT into t_tumblr(name,tags,level) VALUES (#{name},#{tags},#{level})
    </insert>
    <!--批量插入-->
    <insert id="batchTumblrTag" parameterType="java.util.List">
        insert INTO  t_tag(NAME ,times,recent_time) VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.name},#{item.times},#{item.recentTime})
        </foreach>
    </insert>
</mapper>